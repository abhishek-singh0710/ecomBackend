spring.application.name=springboot-ecommerceProject

spring.h2.console.enabled=true
#Syntax=> First JDBC Protocol Then H2 Database Then Mem Means In-Memory Then Name Of The Database Test
#spring.datasource.url=jdbc:h2:mem:test

#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

#Now Hibernate Will Update (Change) The Database Schema Each Time (Recreation Will Happen)
#Here Can Also Use Create Or Create-Drop Using Create It Will Create A New Schema Each Time The Application Starts
#But Using Create-Drop It Will Create A New Schema Each Time The Application Is Started But It Will Also Drop The Schema Each Time The Application Is Stopped
#spring.jpa.hibernate.ddl-auto=update

project.image=images/

spring.security.user.password=demo@123
spring.security.user.name=admin

spring.app.jwtSecret=${JWT_SECRET}
spring.app.jwtExpirationMs=${JWT_EXPIRATION_TIME}

#logging.level.org.springframework=DEBUG
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.springframework.security=DEBUG
#logging.level.com.ecommerceProject.springboot_ecommerceProject=DEBUG

spring.ecom.app.jwtCookieName=${JWT_COOKIE_NAME}

## Using MySQL Database
#spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce
#spring.jpa.show-sql=true
#spring.datasource.username=root
#spring.datasource.password=GogetaBlue123
#
## Hibernate Will Automatically Update The Entity Schema Without Losing The Previous Schema
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

spring.datasource.url=${DATASOURCE_URL}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

frontend.url=${FRONTEND_URL}

image.base.url = ${IMAGE_URL}

razorpay_key_id=${RAZORPAY_KEY_ID}
razorpay_key_secret=${RAZORPAY_KEY_SECRET}
razorpay_currency=${RAZORPAY_CURRENCY}
razorpay_company_name=${RAZORPAY_COMPANY_NAME}